<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Model on</title><link>https://kubedl.io/model/</link><description>Recent content in Model on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:23 +0000</lastBuildDate><atom:link href="https://kubedl.io/model/index.xml" rel="self" type="application/rss+xml"/><item><title>Setup</title><link>https://kubedl.io/model/setup/</link><pubDate>Thu, 12 Nov 2020 15:22:20 +0100</pubDate><guid>https://kubedl.io/model/setup/</guid><description>KubeDL Model uses Kaniko underneath to generate the image that incorporates the model artifacts.
Setup Docker Credentials Docker credentials is required for Kaniko to be able to push the image to docker registry. Below command creates a Kubernetes secret that contains the docker credentials.
kubectl create secret docker-registry regcred --docker-server=https://index.docker.io/v1/ --docker-username=&amp;lt;username&amp;gt; --docker-password=&amp;lt;password&amp;gt; --docker-email=&amp;lt;email&amp;gt; Replace username, password, email with your own.</description></item><item><title>Quick Start</title><link>https://kubedl.io/model/usage/</link><pubDate>Thu, 12 Nov 2020 15:22:20 +0100</pubDate><guid>https://kubedl.io/model/usage/</guid><description>Create a ModelVersion from training job KubeDL training already supports generating a ModelVersion when the job completes. Thus, a model image is automatically generated after job succeeds.
To enable this feature, the TensorFlow job spec needs to set the modelVersion field like the example below:
apiVersion: &amp;quot;training.kubedl.io/v1alpha1&amp;quot; kind: &amp;quot;TFJob&amp;quot; metadata: name: &amp;quot;distributed-tfjob&amp;quot; spec: cleanPodPolicy: None # modelVersion defines the location where the model is stored. modelVersion: # The model name for the model version modelName: mymodel # The dockerhub repo to push the generated image imageRepo: jianhe6/mymodel storage: # Use hostpath, NFS is also supported.</description></item><item><title>Introduction</title><link>https://kubedl.io/model/intro/</link><pubDate>Thu, 12 Nov 2020 15:22:20 +0100</pubDate><guid>https://kubedl.io/model/intro/</guid><description>KubeDL Model tracks a model&amp;rsquo;s version and lineage in Kubernetes CRD. It leverages container image to take versioning of a model. Each model version will generate a corresponding image that includes all the model artifacts.
In short, KubeDL training generates the KubeDL model and can then later by referenced by KubeDL Serving to serve the model directly.
KubeDL provides two CRDs Model and ModelVersion to accomplish this:
ModelVersion ModelVersion describes a model&amp;rsquo;s version, its location, who creates this model, the image repo for pushing the model and so on.</description></item><item><title>Model Storage</title><link>https://kubedl.io/model/storage/</link><pubDate>Thu, 12 Nov 2020 15:22:20 +0100</pubDate><guid>https://kubedl.io/model/storage/</guid><description>KubeDL Model supports different backend storage for generating the model image using Kaniko. Check the full spec here.
Local Storage // LocalStorage defines the local host path for storing the model artifacts. // For a distributed training job, the nodeName will be the node where the chief/master worker run to export the model. type LocalStorage struct { // The local path on the host to store the model artifacts. // +required Path string `json:&amp;quot;path,omitempty&amp;quot;` // This node where chief worker run to export the model.</description></item><item><title>Workflow</title><link>https://kubedl.io/model/design/</link><pubDate>Thu, 12 Nov 2020 15:22:20 +0100</pubDate><guid>https://kubedl.io/model/design/</guid><description>This diagram illustrates the workflow from model generation to model deployment.
In short, KubeDL training or user generates the KubeDL model and can then later by referenced by KubeDL Serving to serve the model directly.
Workflow A ModelVersion CR can be generated by a user manually or programmatically by a training job. KubeDL training jobs (Tensorflow and Pytorch) already integrates this. Check the CRD spec for Tensorflow Job and Pytorch Job.</description></item></channel></rss>
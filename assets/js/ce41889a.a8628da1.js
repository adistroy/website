"use strict";(self.webpackChunkkubedl_website=self.webpackChunkkubedl_website||[]).push([[6796],{3905:function(e,n,r){r.d(n,{Zo:function(){return u},kt:function(){return d}});var t=r(7294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=t.createContext({}),s=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},u=function(e){var n=s(e.components);return t.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),m=s(r),d=i,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||o;return r?t.createElement(f,a(a({ref:n},u),{},{components:r})):t.createElement(f,a({ref:n},u))}));function d(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=m;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,a[1]=c;for(var s=2;s<o;s++)a[s]=r[s];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9293:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return m}});var t=r(7462),i=r(3366),o=(r(7294),r(3905)),a=["components"],c={sidebar_position:6},l="Cron Scheduling",s={unversionedId:"training/cron",id:"training/cron",title:"Cron Scheduling",description:"Cron controller for periodically scheduling training jobs.",source:"@site/docs/training/cron.md",sourceDirName:"training",slug:"/training/cron",permalink:"/docs/training/cron",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/training/cron.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Run in Host Network",permalink:"/docs/training/hostnetowrk"},next:{title:"Gang Scheduling",permalink:"/docs/training/gangscheduling"}},u=[{value:"Example",id:"example",children:[],level:2},{value:"CRD Spec",id:"crd-spec",children:[],level:2}],p={toc:u};function m(e){var n=e.components,r=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"cron-scheduling"},"Cron Scheduling"),(0,o.kt)("p",null,"Cron controller for periodically scheduling training jobs."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps.kubedl.io/v1alpha1\nkind: Cron\nmetadata:\n  name: hello-cron-tf\nspec:\n  schedule: "0 * * * *" # trigger tf training per hour.\n  concurrencyPolicy: Allow\n  historyLimit: 10\n  template:\n    apiVersion: training.kubedl.io/v1alpha1\n    kind: TFJob\n    workload:\n      metadata:\n        generateName: cron-tensorflow\n      spec:\n          cleanPodPolicy: Running\n          successPolicy: AllWorkers\n          tfReplicaSpecs:\n            PS:\n              replicas: 1\n              restartPolicy: Never\n              template:\n                spec:\n                  containers:\n                    - name: tensorflow\n                      image: kubedl/tf-mnist-with-summaries:1.0\n                      command:\n                        - "python"\n                        - "/var/tf_mnist/mnist_with_summaries.py"\n                        - "--log_dir=/train/logs"\n                        - "--learning_rate=0.01"\n                        - "--batch_size=150"\n                      resources:\n                        limits:\n                          cpu: 2048m\n                          memory: 2Gi\n                        requests:\n                          cpu: 1024m\n                          memory: 1Gi          \n            Worker:\n              replicas: 3\n              restartPolicy: Never\n              template:\n                spec:\n                  containers:\n                    - name: tensorflow\n                      image: kubedl/tf-mnist-with-summaries:1.0\n                      command:\n                        - "python"\n                        - "/var/tf_mnist/mnist_with_summaries.py"\n                        - "--log_dir=/train/logs"\n                        - "--learning_rate=0.01"\n                        - "--batch_size=150"\n                      resources:\n                        limits:\n                          cpu: 2048m\n                          memory: 2Gi\n                        requests:\n                          cpu: 1024m\n                          memory: 1Gi\n')),(0,o.kt)("h2",{id:"crd-spec"},"CRD Spec"),(0,o.kt)("p",null,"Check the CRD definition. ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/kubedl-io/kubedl/blob/master/apis/apps/v1alpha1/cron_types.go"},"Go ->")))}m.isMDXComponent=!0}}]);
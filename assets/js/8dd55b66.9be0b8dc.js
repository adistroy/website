"use strict";(self.webpackChunkkubedl_website=self.webpackChunkkubedl_website||[]).push([[4700],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(t),d=a,b=m["".concat(l,".").concat(d)]||m[d]||u[d]||s;return t?r.createElement(b,i(i({ref:n},p),{},{components:t})):r.createElement(b,i({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,i=new Array(s);i[0]=m;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var c=2;c<s;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3857:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var r=t(7462),a=t(3366),s=(t(7294),t(3905)),i=["components"],o={sidebar_position:3},l="Mars",c={unversionedId:"training/workloads/mars",id:"training/workloads/mars",title:"Mars",description:"Mars is a tensor-based unified framework for large-scale data computation which scales Numpy, Pandas and Scikit-learn,",source:"@site/docs/training/workloads/mars.md",sourceDirName:"training/workloads",slug:"/training/workloads/mars",permalink:"/docs/training/workloads/mars",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/training/workloads/mars.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"PyTorch",permalink:"/docs/training/workloads/pytorch"},next:{title:"MPI",permalink:"/docs/training/workloads/mpi"}},p=[{value:"Run Mars with KubeDL",id:"run-mars-with-kubedl",children:[{value:"1. Deploy KubeDL",id:"1-deploy-kubedl",children:[],level:3},{value:"2. Apply Mars CRD",id:"2-apply-mars-crd",children:[],level:3},{value:"3. Create a Mars Job",id:"3-create-a-mars-job",children:[],level:3},{value:"4. Access web-service.",id:"4-access-web-service",children:[{value:"4.1 Access web-service in-cluster.",id:"41-access-web-service-in-cluster",children:[],level:4},{value:"4.2 Access web-service outside cluster.",id:"42-access-web-service-outside-cluster",children:[],level:4}],level:3},{value:"5. Memory Tuning Policy",id:"5-memory-tuning-policy",children:[],level:3}],level:2},{value:"Run Mars in Standalone Mode",id:"run-mars-in-standalone-mode",children:[],level:2},{value:"CRD Spec",id:"crd-spec",children:[],level:2}],u={toc:p};function m(e){var n=e.components,o=(0,a.Z)(e,i);return(0,s.kt)("wrapper",(0,r.Z)({},u,o,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"mars"},"Mars"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Mars")," is a tensor-based unified framework for large-scale data computation which scales Numpy, Pandas and Scikit-learn,\nsee ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/mars-project/mars"},"mars-repo")," for details. As a data computation framework, ",(0,s.kt)("inlineCode",{parentName:"p"},"mars")," is easy to\nscale out and can run across hundreds of machines simultaneously to accelerate large scale data tasks."),(0,s.kt)("p",null,"A distributed mars job includes 3 roles to collaborate with each other\uff1a"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"WebService"),": web-service accepts requests from end-users and forwards the whole tensor-graph to scheduler, it provides a dashboard for end users to track job status and submit tasks interactively."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Scheduler"),": scheduler compiles and holds a global view of tensor-graph, it schedules 'operands' and 'chunks' to workers."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Worker"),": worker listen to 'operands' and 'chunks' dispatched by scheduler, executes the tasks, and reports results back to scheduler.")),(0,s.kt)("h2",{id:"run-mars-with-kubedl"},"Run Mars with KubeDL"),(0,s.kt)("p",null,"Run ",(0,s.kt)("inlineCode",{parentName:"p"},"mars")," job on kubernetes natively."),(0,s.kt)("h3",{id:"1-deploy-kubedl"},"1. Deploy KubeDL"),(0,s.kt)("p",null,"Follow the ",(0,s.kt)("a",{parentName:"p",href:"docs/installation/install-using-yaml"},"installation tutorial")),(0,s.kt)("h3",{id:"2-apply-mars-crd"},"2. Apply Mars CRD"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Mars")," CRD(CustomResourceDefinition) manifest file describes the structure of a mars job spec. Run the following to apply the CRD:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://raw.githubusercontent.com/alibaba/kubedl/v0.3.0/config/crd/bases/training.kubedl.io_marsjobs.yaml\n")),(0,s.kt)("h3",{id:"3-create-a-mars-job"},"3. Create a Mars Job"),(0,s.kt)("p",null,"Create a YAML spec that describes the requirements of a MarsJob such as the worker, scheduler, WebService like below"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: training.kubedl.io/v1alpha1\nkind: MarsJob\nmetadata:\n  name: mars-test-demo\n  namespace: default\nspec:\n  cleanPodPolicy: None\n  webHost: mars.domain.com\n  marsReplicaSpecs:\n    Scheduler:\n      replicas: 1\n      restartPolicy: Never\n      template:\n        metadata:\n          labels:\n            mars/service-type: marsscheduler\n        spec:\n          containers:\n            - command:\n                - /bin/sh\n                - -c\n                - python -m mars.deploy.kubernetes.scheduler\n              image: mars-image\n              imagePullPolicy: Always\n              name: mars\n              resources:\n                limits:\n                  cpu: 2\n                  memory: 2Gi\n                requests:\n                  cpu: 2\n                  memory: 2Gi\n          serviceAccountName: kubedl-sa\n    WebService:\n      replicas: 1\n      restartPolicy: Never\n      template:\n        metadata:\n          labels:\n            mars/service-type: marswebservice\n        spec:\n          containers:\n            - command:\n                - /bin/sh\n                - -c\n                - python -m mars.deploy.kubernetes.web\n              image: mars-image\n              imagePullPolicy: Always\n              name: mars\n              resources:\n                limits:\n                  cpu: 2\n                  memory: 2Gi\n                requests:\n                  cpu: 2\n                  memory: 2Gi\n          serviceAccountName: kubedl-sa\n    Worker:\n      replicas: 2\n      restartPolicy: Never\n      template:\n        metadata:\n          labels:\n            mars/service-type: marsworker\n        spec:\n          containers:\n            - command:\n                - /bin/sh\n                - -c\n                - python -m mars.deploy.kubernetes.worker\n              image: mars-image\n              imagePullPolicy: Always\n              name: mars\n              resources:\n                limits:\n                  cpu: 2\n                  memory: 2Gi\n                requests:\n                  cpu: 2\n                  memory: 2Gi\n          serviceAccountName: kubedl-sa\nstatus: {}\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"spec")," field describes the requirement of each replica, including ",(0,s.kt)("inlineCode",{parentName:"p"},"replicas"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"restartPolicy"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"template"),"...and\nthe ",(0,s.kt)("inlineCode",{parentName:"p"},"status")," field describes the job current status. Run following command to start an example mars job:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl create -f example/mars/mars-test-demo.yaml\n")),(0,s.kt)("p",null,"Check the mars job status:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"$ kubectl get marsjob\nNAME             STATE     AGE   FINISHED-TTL   MAX-LIFETIME\nmars-test-demo   Running   40m\n$ kubectl get pods\nNAME                                            READY   STATUS             RESTARTS   AGE\nmars-test-demo-scheduler-0                      1/1     Running            0          40m\nmars-test-demo-webservice-0                     1/1     Running            0          40m\nmars-test-demo-worker-0                         1/1     Running            0          40m\nmars-test-demo-worker-1                         1/1     Running            0          40m\n\n")),(0,s.kt)("h3",{id:"4-access-web-service"},"4. Access web-service."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"mars-ingress",src:t(620).Z,width:"892",height:"452"}),"\nWeb service visualizes job status, computation process progress and provides an entry for interactive submission.\nHowever, web service instance was running as a pod inside a kubernetes cluster which may not be accessible by external users.\n",(0,s.kt)("inlineCode",{parentName:"p"},"KubeDL")," provides two access modes for users in different network environment."),(0,s.kt)("h4",{id:"41-access-web-service-in-cluster"},"4.1 Access web-service in-cluster."),(0,s.kt)("p",null,"For users in the same network environment with web service instance, they can directly access its ",(0,s.kt)("em",{parentName:"p"},"service")," without any other additional configurations,\nand the address is formatted as: ",(0,s.kt)("inlineCode",{parentName:"p"},"{webservice-name}.{namespace}"),", it is a ",(0,s.kt)("inlineCode",{parentName:"p"},"A")," record generated by ",(0,s.kt)("inlineCode",{parentName:"p"},"CoreDNS"),", so you have to ensure that ",(0,s.kt)("inlineCode",{parentName:"p"},"CoreDNS")," has been\ndeployed."),(0,s.kt)("h4",{id:"42-access-web-service-outside-cluster"},"4.2 Access web-service outside cluster."),(0,s.kt)("p",null,"For users in different network environment(e.g. an internet user wants to access a mars web-service running in vpc),\nusers have to apply an SLB address first, so that they can ping the ip in ",(0,s.kt)("strong",{parentName:"p"},"vpc")," with a public address by SLB domain resolving, then in job spec, users just need fill the ",(0,s.kt)("inlineCode",{parentName:"p"},"spec.webHost")," field with\ntheir applied SLB address, ",(0,s.kt)("inlineCode",{parentName:"p"},"KubeDL"),"will generated ingress instance with routing rules, so that external traffic can be routed to target web service and that\nbecomes available for outside users."),(0,s.kt)("h3",{id:"5-memory-tuning-policy"},"5. Memory Tuning Policy"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"Worker")," is the role that actually performs computing tasks in ",(0,s.kt)("inlineCode",{parentName:"p"},"MarsJob"),".\nMars supports running jobs in different memory usage scenarios. For example, swap cold in-memory data out to spill dirs and persist in kubernetes ephemeral-storage.\n",(0,s.kt)("inlineCode",{parentName:"p"},"Mars")," provides plentiful memory tuning options which has been integrated to ",(0,s.kt)("inlineCode",{parentName:"p"},"MarsJob")," type definition, including :"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"plasmaStore: PlasmaStore specify the socket path of plasma store that handles shared memory between all worker processes."),(0,s.kt)("li",{parentName:"ul"},"lockFreeFileIO: LockFreeFileIO indicates whether spill dirs are dedicated or not."),(0,s.kt)("li",{parentName:"ul"},"spillDirs: SpillDirs specify multiple directory paths, when size of in-memory objects is about to reach the limitation, mars workers will swap cold data out to spill dirs and persist in ephemeral-storage."),(0,s.kt)("li",{parentName:"ul"},"workerCachePercentage: WorkerCachePercentage specify the percentage of total available memory size can be used as cache, it will be overridden by workerCacheSize if it is been set."),(0,s.kt)("li",{parentName:"ul"},"workerCacheSize\uff1aWorkerCacheSize specify the exact cache quantity can be used.")),(0,s.kt)("p",null,"users can set above options in ",(0,s.kt)("inlineCode",{parentName:"p"},"job.spec.memoryTuningPolicy")," field:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: training.kubedl.io/v1alpha1\nkind: MarsJob\nmetadata:\n  name: mars-test-demo\n  namespace: default\nspec:\n  cleanPodPolicy: None\n  memoryTuningPolicy:\n    plasmaStore: string              # /etc/pstore/...\n    lockFreeFileIO: bool             # false\n    spillDirs: []string              # ...\n    workerCachePercentage: int32     # 80, indicates 80%\n    workerCacheSize: quantity        # 10Gi\n  marsReplicaSpecs:\n    ...\n")),(0,s.kt)("h2",{id:"run-mars-in-standalone-mode"},"Run Mars in Standalone Mode"),(0,s.kt)("p",null,"In standalone mode, a distributed ",(0,s.kt)("inlineCode",{parentName:"p"},"Mars")," job are running standalone on bare hosts without the help of other container orchestration tools.\nBut this requires manual configuration effort and lack other abilities such as automatic failover of workers."),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"run ",(0,s.kt)("inlineCode",{parentName:"li"},"pip install pymars[distributed]")," on every node in the cluster to install dependencies needed for distributed execution."),(0,s.kt)("li",{parentName:"ol"},"start different mars role processes on each node.",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"mars-scheduler -a <scheduler_ip> -p <scheduler_port>")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"mars-web -a <web_ip> -p <web_port> -s <scheduler_ip>:<scheduler_port>")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"mars-worker -a <worker_ip> -p <worker_port> -s <scheduler_ip>:<scheduler_port>")))),(0,s.kt)("li",{parentName:"ol"},"usually there must be at least 1 web-service and 1 scheduler and a certain number of workers."),(0,s.kt)("li",{parentName:"ol"},"after all processes started, users can open the python console run snippet to create a session with web-service and submit tasks.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"import mars.tensor as mt\nimport mars.dataframe as md\nfrom mars.session import new_session\nnew_session('http://<web_ip>:<web_port>').as_default()\na = mt.ones((2000, 2000), chunk_size=200)\nb = mt.inner(a, a)\nb.execute()  # submit tensor to cluster\ndf = md.DataFrame(a).sum()\ndf.execute()  # submit DataFrame to cluster\n")),(0,s.kt)("h2",{id:"crd-spec"},"CRD Spec"),(0,s.kt)("p",null,"Check the CRD definition. ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/alibaba/kubedl/blob/master/apis/training/v1alpha1/marsjob_types.go"},"Go ->")))}m.isMDXComponent=!0},620:function(e,n,t){n.Z=t.p+"assets/images/mars-ingress-6da29c0b510e76bfd12b934cbc9db857.png"}}]);
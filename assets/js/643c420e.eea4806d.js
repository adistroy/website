"use strict";(self.webpackChunkkubedl_website=self.webpackChunkkubedl_website||[]).push([[881],{3905:function(t,e,n){n.d(e,{Zo:function(){return m},kt:function(){return c}});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var d=a.createContext({}),p=function(t){var e=a.useContext(d),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},m=function(t){var e=p(t.components);return a.createElement(d.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},s=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,d=t.parentName,m=o(t,["components","mdxType","originalType","parentName"]),s=p(n),c=r,k=s["".concat(d,".").concat(c)]||s[c]||u[c]||l;return n?a.createElement(k,i(i({ref:e},m),{},{components:n})):a.createElement(k,i({ref:e},m))}));function c(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,i=new Array(l);i[0]=s;var o={};for(var d in e)hasOwnProperty.call(e,d)&&(o[d]=e[d]);o.originalType=t,o.mdxType="string"==typeof t?t:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},5994:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return o},contentTitle:function(){return d},metadata:function(){return p},toc:function(){return m},default:function(){return s}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),i=["components"],o={sidebar_position:9},d="Job MetaData Persistency",p={unversionedId:"training/metadata-persistency",id:"training/metadata-persistency",title:"Job MetaData Persistency",description:"Kubernetes api-server typically stores job information for a limited lifespan. KubeDL has built-in support to persist the",source:"@site/docs/training/metadata-persistency.md",sourceDirName:"training",slug:"/training/metadata-persistency",permalink:"/docs/training/metadata-persistency",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/training/metadata-persistency.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Job Events Persistency",permalink:"/docs/training/events-persistency"},next:{title:"Tensorboard",permalink:"/docs/training/tensorboard"}},m=[{value:"DB Schema",id:"db-schema",children:[{value:"Job Table",id:"job-table",children:[],level:3},{value:"Pod Table",id:"pod-table",children:[],level:3}],level:2},{value:"How To Use",id:"how-to-use",children:[],level:2},{value:"MySql Config",id:"mysql-config",children:[],level:2},{value:"Contributions",id:"contributions",children:[],level:2}],u={toc:m};function s(t){var e=t.components,n=(0,r.Z)(t,i);return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"job-metadata-persistency"},"Job MetaData Persistency"),(0,l.kt)("p",null,"Kubernetes api-server typically stores job information for a limited lifespan. KubeDL has built-in support to persist the\njob metadata into external storage to outlive api-server state.\nThe KubeDL controller will persist the job metadata during the lifecycle of job such as job and pod creation/deletion."),(0,l.kt)("p",null,"Currently, only ",(0,l.kt)("inlineCode",{parentName:"p"},"Mysql")," is supported."),(0,l.kt)("h2",{id:"db-schema"},"DB Schema"),(0,l.kt)("h3",{id:"job-table"},"Job Table"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"Column")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"Type")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"Description")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"int(64)"),(0,l.kt)("td",{parentName:"tr",align:null},"primary id auto incremented by underlying database")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"name"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(128)"),(0,l.kt)("td",{parentName:"tr",align:null},"name of job")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"namespace"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(128)"),(0,l.kt)("td",{parentName:"tr",align:null},"namespace of job")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"job_id"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(64)"),(0,l.kt)("td",{parentName:"tr",align:null},"job uid generated by kubernetes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"version"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(32)"),(0,l.kt)("td",{parentName:"tr",align:null},"resource version generated by kubernetes(etcd)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"status"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(32)"),(0,l.kt)("td",{parentName:"tr",align:null},"current observed job status(Created/Running/Failed/Succeed/Restarting)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"kind"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(32)"),(0,l.kt)("td",{parentName:"tr",align:null},"kind of job: TFJob,PyTorchJob...")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"resources"),(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"job requested resources, including replicas and resources of each role.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"deploy_region"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(64)"),(0,l.kt)("td",{parentName:"tr",align:null},"deploy_region indicates the physical region(IDC) this job located in, reserved for jobs running in across-region-clusters")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"tenant"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(255)"),(0,l.kt)("td",{parentName:"tr",align:null},"fields reserved for multi-tenancy job management scenarios, indicating which tenant this job belongs to and who's the owner(user)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"owner"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(255)"),(0,l.kt)("td",{parentName:"tr",align:null},"owner of job")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"is_in_etcd"),(0,l.kt)("td",{parentName:"tr",align:null},"tinyint(4)"),(0,l.kt)("td",{parentName:"tr",align:null},"is_in_etcd indicates that whether record of this job has been removed from etcd")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gmt_created"),(0,l.kt)("td",{parentName:"tr",align:null},"datetime"),(0,l.kt)("td",{parentName:"tr",align:null},"timestamp when job created")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gmt_modified"),(0,l.kt)("td",{parentName:"tr",align:null},"datetime"),(0,l.kt)("td",{parentName:"tr",align:null},"timestamp when last job status transited")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gmt_finished"),(0,l.kt)("td",{parentName:"tr",align:null},"datetime"),(0,l.kt)("td",{parentName:"tr",align:null},"timestamp when job failed or succeed")))),(0,l.kt)("h3",{id:"pod-table"},"Pod Table"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"Column")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"Type")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"Description")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"int(64)"),(0,l.kt)("td",{parentName:"tr",align:null},"primary id auto incremented by underlying database")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"name"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(128)"),(0,l.kt)("td",{parentName:"tr",align:null},"name of pod")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"namespace"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(128)"),(0,l.kt)("td",{parentName:"tr",align:null},"namespace of pod")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pod_id"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(64)"),(0,l.kt)("td",{parentName:"tr",align:null},"pod uid generated by kubernetes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"version"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(32)"),(0,l.kt)("td",{parentName:"tr",align:null},"resource version generated by kubernetes(etcd)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"status"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(32)"),(0,l.kt)("td",{parentName:"tr",align:null},"current observed pod phase(Pending/Running/Failed/Succeed/Unkown)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"image"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(255)"),(0,l.kt)("td",{parentName:"tr",align:null},"image name of main conatiner")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"job_id"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(64)"),(0,l.kt)("td",{parentName:"tr",align:null},"job id of this pod controlled by")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"replica_type"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(32)"),(0,l.kt)("td",{parentName:"tr",align:null},"replica type of this pod belongs to")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"resources"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(1024)"),(0,l.kt)("td",{parentName:"tr",align:null},"resources this pod requested, marshaled from a ResourceRequirements object")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"host_ip"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(64)"),(0,l.kt)("td",{parentName:"tr",align:null},"ip of the host this pod scheduled")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pod_ip"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(64)"),(0,l.kt)("td",{parentName:"tr",align:null},"ip of this pod allocated")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"deploy_region"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar(64)"),(0,l.kt)("td",{parentName:"tr",align:null},"deploy_region indicates the physical region(IDC) this job located in")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"is_in_etcd"),(0,l.kt)("td",{parentName:"tr",align:null},"tinyint(4)"),(0,l.kt)("td",{parentName:"tr",align:null},"is_in_etcd indicates that whether record of this job has been removed from etcd")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"remark"),(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null},"extended messaged for pod")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gmt_created"),(0,l.kt)("td",{parentName:"tr",align:null},"datetime"),(0,l.kt)("td",{parentName:"tr",align:null},"timestamp when pod created")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gmt_modified"),(0,l.kt)("td",{parentName:"tr",align:null},"datetime"),(0,l.kt)("td",{parentName:"tr",align:null},"timestamp when last pod status transited")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gmt_started"),(0,l.kt)("td",{parentName:"tr",align:null},"datetime"),(0,l.kt)("td",{parentName:"tr",align:null},"timestamp when main container stared")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gmt_finished"),(0,l.kt)("td",{parentName:"tr",align:null},"datetime"),(0,l.kt)("td",{parentName:"tr",align:null},"timestamp when pod failed or succeed")))),(0,l.kt)("h2",{id:"how-to-use"},"How To Use"),(0,l.kt)("p",null,"Below is an example to setup KubeDL to use ",(0,l.kt)("inlineCode",{parentName:"p"},"Mysql")," as the persistency DB."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Set up credentials for KubeDL to connect to DB. Create a ",(0,l.kt)("inlineCode",{parentName:"li"},"Secret")," object like below:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Secret\nmetadata:\n  name: kubedl-mysql-config\n  namespace: kubedl-system\ntype: Opaque\nstringData:\n  host: my.host.com\n  dbName: kubedl\n  user: kubedl-user\n  password: this-is-me\n  port: "3306"\n')),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"Update the Kubedl Deployment spec to include ",(0,l.kt)("inlineCode",{parentName:"li"},"--meta-storage mysql")," in the startup flag and reference the DB credentials\nvia environment variables. The KubeDL controller uses the env to set up connection with DB.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: kubedl\n  namespace: kubedl-system\n  labels:\n    app: kubedl\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: kubedl\n  template:\n    metadata:\n      labels:\n        app: kubedl\n    spec:\n      containers:\n      - image: kubedl/kubedl:v0.3.0\n        imagePullPolicy: Always\n        name: kubedl-manager\n        args:\n        - "--meta-storage"\n        - "mysql"\n        env:\n        - name: MYSQL_HOST\n          value:\n          valueFrom:\n            secretKeyRef:\n              name: kubedl-mysql-config\n              key: host\n        - name: MYSQL_DB_NAME\n          value:\n          valueFrom:\n            secretKeyRef:\n              name: kubedl-mysql-config\n              key: dbName\n        - name: MYSQL_USER\n          value:\n          valueFrom:\n            secretKeyRef:\n              name: kubedl-mysql-config\n              key: user\n        - name: MYSQL_PASSWORD\n          value:\n          valueFrom:\n            secretKeyRef:\n              name: kubedl-mysql-config\n              key: password\n')),(0,l.kt)("h2",{id:"mysql-config"},"MySql Config"),(0,l.kt)("p",null,"The configs defined in the aforementioned ",(0,l.kt)("inlineCode",{parentName:"p"},"secret"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Config Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"host"),(0,l.kt)("td",{parentName:"tr",align:null},"Mysql host name")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"dbName"),(0,l.kt)("td",{parentName:"tr",align:null},"DB name")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"user"),(0,l.kt)("td",{parentName:"tr",align:null},"User name")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"password"),(0,l.kt)("td",{parentName:"tr",align:null},"User password")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"port"),(0,l.kt)("td",{parentName:"tr",align:null},"The mysql DB port to connect to")))),(0,l.kt)("h2",{id:"contributions"},"Contributions"),(0,l.kt)("p",null,"Currently, only ",(0,l.kt)("inlineCode",{parentName:"p"},"mysql")," is supported. You are welcome to contribute your own storage plugin."))}s.isMDXComponent=!0}}]);
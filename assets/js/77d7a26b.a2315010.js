"use strict";(self.webpackChunkkubedl_website=self.webpackChunkkubedl_website||[]).push([[4799],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=l(t),f=o,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||i;return t?r.createElement(m,a(a({ref:n},u),{},{components:t})):r.createElement(m,a({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var l=2;l<i;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7038:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),a=["components"],c={sidebar_position:7},s="Artifacts Sync",l={unversionedId:"training/code-sync",id:"training/code-sync",title:"Artifacts Sync",description:"KubeDL supports syncing files from remote on container launch.",source:"@site/docs/training/code-sync.md",sourceDirName:"training",slug:"/training/code-sync",permalink:"/docs/training/code-sync",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/training/code-sync.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Gang Scheduling",permalink:"/docs/training/gangscheduling"},next:{title:"Job Events Persistency",permalink:"/docs/training/events-persistency"}},u=[{value:"Git Hub",id:"git-hub",children:[],level:3}],p={toc:u};function d(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"artifacts-sync"},"Artifacts Sync"),(0,i.kt)("p",null,"KubeDL supports syncing files from remote on container launch.\nUser can modify the code, reference the code repository and run the jobs without re-building the image every time to include the modified code."),(0,i.kt)("p",null,"Currently, only support downloading from github. The implementation is pluggable and can easily support other distributed filesystem like HDFS."),(0,i.kt)("h3",{id:"git-hub"},"Git Hub"),(0,i.kt)("p",null,"Users can set the git config in the job's annotation with key ",(0,i.kt)("inlineCode",{parentName:"p"},"kubedl.io/git-sync-config")," as below. The git repo will be\ndownloaded and saved in the container's ",(0,i.kt)("inlineCode",{parentName:"p"},"working dir")," by default. Please use the git repo's clone url ending with the ",(0,i.kt)("inlineCode",{parentName:"p"},".git"),",\nrather than the git repo's web url."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'    apiVersion: "training.kubedl.io/v1alpha1"\n    kind: "TFJob"\n    metadata:\n      name: "mnist"\n      namespace: kubedl\n      annotations:\n +      kubedl.io/git-sync-config: \'{"source": "https://github.com/alibaba/kubedl.git" }\'\n    spec:\n      cleanPodPolicy: None\n      tfReplicaSpecs:\n        ...\n')),(0,i.kt)("p",null,"A full list of supported options are:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "source": "https://github.com/sample/sample.git",  // code source (required).\n    "image": "xxx",     // the image to execute the git-sync logic (optional).\n    "rootPath": "xxx",  // the path to save downloaded files (optional).\n    "destPath": "xxx",  // the name of (a symlink to) a directory in which to check-out files (optional).\n    "envs": [],         // user-customized environment variables (optional).\n    "branch": "xxx",    // git repo branch (optional).\n    "revison": "xxx",   // git repo commit revision (optional).\n    "depth": "xxx",     // git sync depth (optional).\n    "maxFailures" : 3,  // max consecutive failures allowed (optional).\n    "ssh": false,       // use ssh mode or not (optional).\n    "sshFile": "xxx",   // ssh file path (optional).\n    "user": "xxx",      // git config username (optional).\n    "password": "xxx"   // git config password (optional).\n}\n')))}d.isMDXComponent=!0}}]);